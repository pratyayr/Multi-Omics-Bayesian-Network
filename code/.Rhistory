###### Basic BNA for each quadruple separately ######
bnscoregap3=numeric(length(didcand))
for (i in 1:length(didcand)){
temp=myhillclimb.exhaust(didcand[i],candid,counts,genos,genes,did.pheno,all.models,plot=F)
bnscoregap3[i]=temp$bicgap[2]
}
sum(bnscoregap3>2) #29
sum(bnscoregap3>0) #29
sum(bnscoregap3>2) #29
sum(bnscoregap3>2) #0, no further investigation will be done
common=intersect(row.names(lda2006),colnames(vsd.mirna))
counts=vsd.mirna[,common] #881 x 57
genos=genomat.alleles.sdp.short[,common]
genes=genedata.collapsed[,common]
lda.pheno=lda2006[common,] #length 57 vector
names(lda.pheno)=common
ldagenecor=ldasnpcor=ldamircor=numeric(nrow(candid))
#To store the correlations of the triplets with the phenotype
for (i in 1:nrow(candid)){
ldagenecor[i]=cor.test(lda.pheno,genes[candid[i,3],])$p.value
ldasnpcor[i]=cor.test(lda.pheno,as.numeric(genos[candid[i,2],]))$p.value
ldamircor[i]=cor.test(lda.pheno,counts[candid[i,1],])$p.value
}
sum(ldagenecor<0.05 & ldasnpcor<0.05 & ldamircor<0.05) #2231
ldacand=which(ldagenecor<0.05 & ldasnpcor<0.05 & ldamircor<0.05)
###### Basic BNA for each quadruple separately ######
bnscoregap3=bnscoregap4=numeric(length(ldacand))
for (i in 1:length(ldacand)){
temp=myhillclimb.exhaust(ldacand[i],candid,counts,genos,genes,lda.pheno,all.models,plot=F)
bnscoregap3[i]=temp$bicgap[2]
bnscoregap4[i]=temp$bicgap[3]
}
### Selecting interesting quadruples and building larger network ###
sel.mir=unique(candid[ldacand[which(bnscoregap3>2)],1])
sel.snps=unique(candid[ldacand[which(bnscoregap3>2)],2])
sel.genes=unique(candid[ldacand[which(bnscoregap3>2 & bnscoregap4>-1)],3])
sel.mir
sel.snps
sel.genes
smalldata=as.data.frame(cbind(t(genos[sel.snps,]),t(genes[sel.genes,]),
(counts[sel.mir,]),lda.pheno))
names(smalldata)=c(paste0("snp",1:length(sel.snps)),paste0("gene",1:length(sel.genes)),
paste0("mir",1:length(sel.mir)),"phe")
blackmat=blackmatgen(length(sel.snps),length(sel.genes),length(sel.mir))
bn.hc=hc(smalldata, blacklist=blackmat)
graphviz.plot(bn.hc)
row.names(genedata.collapsed)[sel.genes]
genenames[sel.genes]
mirna.names$names[sel.mir]
sel.snps
set.seed(1)
boot=boot.strength(smalldata,R=500,algorithm="hc",
algorithm.args = list(blacklist=blackmat))
boot[(boot$strength > 0.5) & (boot$direction >= 0.5), ]
avg.boot=averaged.network(boot[boot$direction >= 0.5,],threshold = 0.5)
graphviz.plot(avg.boot)
#### gene to phenotype ####
(summary(smalldata$gene2)[5]-summary(smalldata$gene2)[2])*(-1679.886)/
(summary(smalldata$phe)[5]-summary(smalldata$phe)[2])
#### mirna to phenotype ####
(summary(smalldata$mir1)[5]-summary(smalldata$mir1)[2])*(0.0500073)*(-1679.886)/
(summary(smalldata$phe)[5]-summary(smalldata$phe)[2])
### For Prediction figure ###
bn.fit(avg.boot,smalldata)
ldaarr.g=10708.563-1679.886*summary(smalldata$gene2)[c(1,2,5,6)]
ldaarr.m=10708.563-1679.886*(5.8883102+0.0500073*summary(smalldata$mir1)[c(1,2,5,6)])
common=intersect(row.names(lorr2005),colnames(vsd.mirna))
lorr.pheno=lorr2005[common,] #Only males, 58 dimensional vector
names(lorr.pheno)=common
counts=vsd.mirna[,common] #881 x 58
genos=genomat.alleles.sdp.short[,common]
genes=genedata.collapsed[,common]
lorrgenecor=lorrsnpcor=lorrmircor=numeric(nrow(candid))
for (i in 1:nrow(candid)){
lorrgenecor[i]=cor.test(lorr.pheno,genes[candid[i,3],])$p.value
lorrsnpcor[i]=cor.test(lorr.pheno,as.numeric(genos[candid[i,2],]))$p.value
lorrmircor[i]=cor.test(lorr.pheno,counts[candid[i,1],])$p.value
}
sum(lorrgenecor<0.05 & lorrsnpcor<0.05 & lorrmircor<0.05) #646
lorrcand=which(lorrgenecor<0.05 & lorrsnpcor<0.05 & lorrmircor<0.05)
bnscoregap3=bnscoregap4=numeric(length(lorrcand))
for (i in 1:length(lorrcand)){
temp=myhillclimb.exhaust(lorrcand[i],candid,counts,genos,genes,lorr.pheno,all.models,plot=F)
bnscoregap3[i]=temp$bicgap[2]
bnscoregap4[i]=temp$bicgap[3]
}
### Selecting interesting quadruples and building larger network ###
sel.mir=unique(candid[lorrcand[which(bnscoregap3>2)],1])
sel.snps=unique(candid[lorrcand[which(bnscoregap3>2)],2])
sel.genes=unique(candid[lorrcand[which(bnscoregap3>2 & bnscoregap4>-1)],3])
### Network 1 ###
sel.mir=sel.mir[-2]
sel.snps=sel.snps[-5]
sel.genes=sel.genes[-8]
smalldata=as.data.frame(cbind(t(genos[sel.snps,]),t(genes[sel.genes,]),
(counts[sel.mir,]),lorr.pheno))
names(smalldata)=c(paste0("snp",1:length(sel.snps)),paste0("gene",1:length(sel.genes)),
paste0("mir",1:length(sel.mir)),"phe")
blackmat=blackmatgen(length(sel.snps),length(sel.genes),length(sel.mir))
bn.hc=hc(smalldata, blacklist=blackmat)
graphviz.plot(bn.hc)
# Find out which SDPs, genes and miRNAs are in the network #
row.names(genedata.collapsed)[sel.genes]
genenames[sel.genes]
mirna.names$names[sel.mir]
sel.snps
#Bootstrap#
set.seed(1)
boot=boot.strength(smalldata,R=500,algorithm="hc",
algorithm.args = list(blacklist=blackmat))
boot[(boot$strength > 0.5) & (boot$direction >= 0.5), ]
avg.boot=averaged.network(boot[boot$direction >= 0.5,],threshold = 0.5)
graphviz.plot(avg.boot)
sel.mir=unique(candid[lorrcand[which(bnscoregap3>2)],1])
sel.snps=unique(candid[lorrcand[which(bnscoregap3>2)],2])
sel.genes=unique(candid[lorrcand[which(bnscoregap3>2 & bnscoregap4>-1)],3])
sel.mir=sel.mir[2]
sel.snps=sel.snps[5]
sel.genes=sel.genes[8]
smalldata=as.data.frame(cbind(t(genos[sel.snps,]),(genes[sel.genes,]),
(counts[sel.mir,]),lorr.pheno))
names(smalldata)=c(paste0("snp",1:length(sel.snps)),paste0("gene",1:length(sel.genes)),
paste0("mir",1:length(sel.mir)),"phe")
blackmat=blackmatgen(length(sel.snps),length(sel.genes),length(sel.mir))
bn.hc=hc(smalldata, blacklist=blackmat)
graphviz.plot(bn.hc)
#Bootstrap#
set.seed(1)
boot=boot.strength(smalldata,R=500,algorithm="hc",
algorithm.args = list(blacklist=blackmat))
boot[(boot$strength > 0.5) & (boot$direction >= 0.5), ]
avg.boot=averaged.network(boot[boot$direction >= 0.5,],threshold = 0.5)
graphviz.plot(avg.boot)
# Find out which SDPs, genes and miRNAs are in the network #
row.names(genedata.collapsed)[sel.genes]
genenames[sel.genes]
mirna.names$names[sel.mir]
sel.snps
#### gene to phenotype ####
(summary(smalldata$gene1)[5]-summary(smalldata$gene1)[2])*(-207.3)/
(summary(smalldata$phe)[5]-summary(smalldata$phe)[2])
#### mirna to phenotype ####
(summary(smalldata$mir1)[5]-summary(smalldata$mir1)[2])*(-0.02816)*(-207.3)/
(summary(smalldata$phe)[5]-summary(smalldata$phe)[2])
### Prediction figure ###
bn.fit(avg.boot,smalldata)
lorrarr.g=1737.5735-207.2776*summary(smalldata$gene1)[c(1,2,5,6)]
lorrarr.m=1737.5735-207.2776*(8.13411157-0.02816277*summary(smalldata$mir1)[c(1,2,5,6)])
####### Prediction Figure #########
Cairo(file=paste0(resultdir,"ldalorrbar.pdf"),typ="pdf",dpi=80,height=490,width=800)
op=par(oma=c(3.5,0,1,0))
par(mfrow=c(1,2))
plot(c(1,7.5),c(-600,600),type="n",
xlab="Difference in Expression",ylab="Change in LDA (cm)",
xaxt="n",main="A")
axis(side=1,at=c(2.5,6.5),labels = c("2-Quartile","4-Quartile"),tick = F)
lines(c(2,2),c(0,-ldaarr.m[2]+ldaarr.m[3]),col="red",lwd=20,lend="butt")
lines(c(2.7,2.7),c(0,-ldaarr.g[2]+ldaarr.g[3]),col="blue",lwd=20,lend="butt")
lines(c(6.1,6.1),c(0,-ldaarr.m[1]+ldaarr.m[4]),col="red",lwd=20, lend="butt")
lines(c(6.8,6.8),c(0,-ldaarr.g[1]+ldaarr.g[4]),col="blue",lwd=20, lend="butt")
abline(h=0)
plot(c(1,7.5),c(-50,50),type="n",
xlab="Difference in Expression",ylab="Change in LORR (min)",
xaxt="n",main="B")
axis(side=1,at=c(2.5,6.5),labels = c("2-Quartile","4-Quartile"),tick = F)
lines(c(2,2),c(0,-lorrarr.m[2]+lorrarr.m[3]),col="red",lwd=20, lend="butt")
lines(c(2.7,2.7),c(0,-lorrarr.g[2]+lorrarr.g[3]),col="blue",lwd=20, lend="butt")
lines(c(6.1,6.1),c(0,-lorrarr.m[1]+lorrarr.m[4]),col="red",lwd=20, lend="butt")
lines(c(6.8,6.8),c(0,-lorrarr.g[1]+lorrarr.g[4]),col="blue",lwd=20, lend="butt")
abline(h=0)
op = par(usr=c(0,1,0,1), xpd=NA)
legend(-0.5,-0.46,
legend=c("miRNA","Gene"),
fill=c("red","blue"),
bg="white", horiz=T, cex=1, bty="n")
dev.off()
####### Prediction Figure #########
Cairo(file="ldalorrbar.pdf",typ="pdf",dpi=80,height=490,width=800)
op=par(oma=c(3.5,0,1,0))
par(mfrow=c(1,2))
plot(c(1,7.5),c(-600,600),type="n",
xlab="Difference in Expression",ylab="Change in LDA (cm)",
xaxt="n",main="A")
axis(side=1,at=c(2.5,6.5),labels = c("2-Quartile","4-Quartile"),tick = F)
lines(c(2,2),c(0,-ldaarr.m[2]+ldaarr.m[3]),col="red",lwd=20,lend="butt")
lines(c(2.7,2.7),c(0,-ldaarr.g[2]+ldaarr.g[3]),col="blue",lwd=20,lend="butt")
lines(c(6.1,6.1),c(0,-ldaarr.m[1]+ldaarr.m[4]),col="red",lwd=20, lend="butt")
lines(c(6.8,6.8),c(0,-ldaarr.g[1]+ldaarr.g[4]),col="blue",lwd=20, lend="butt")
abline(h=0)
plot(c(1,7.5),c(-50,50),type="n",
xlab="Difference in Expression",ylab="Change in LORR (min)",
xaxt="n",main="B")
axis(side=1,at=c(2.5,6.5),labels = c("2-Quartile","4-Quartile"),tick = F)
lines(c(2,2),c(0,-lorrarr.m[2]+lorrarr.m[3]),col="red",lwd=20, lend="butt")
lines(c(2.7,2.7),c(0,-lorrarr.g[2]+lorrarr.g[3]),col="blue",lwd=20, lend="butt")
lines(c(6.1,6.1),c(0,-lorrarr.m[1]+lorrarr.m[4]),col="red",lwd=20, lend="butt")
lines(c(6.8,6.8),c(0,-lorrarr.g[1]+lorrarr.g[4]),col="blue",lwd=20, lend="butt")
abline(h=0)
op = par(usr=c(0,1,0,1), xpd=NA)
legend(-0.5,-0.46,
legend=c("miRNA","Gene"),
fill=c("red","blue"),
bg="white", horiz=T, cex=1, bty="n")
dev.off()
qqunif.plot<-function(pvalues,
should.thin=T, thin.obs.places=2, thin.exp.places=2,
xlab=expression(paste("Expected (",-log[10], " p-value)")),
ylab=expression(paste("Observed (",-log[10], " p-value)")),
title="QQ-plot", yrange=NULL,
draw.conf=TRUE, conf.points=1000, conf.col="lightgray", conf.alpha=.05,
already.transformed=FALSE, pch=20, aspect="iso", prepanel=prepanel.qqunif,
par.settings=list(superpose.symbol=list(pch=pch)), ...) {
#error checking
if (length(pvalues)==0) stop("pvalue vector is empty, can't draw plot")
if(!(class(pvalues)=="numeric" ||
(class(pvalues)=="list" && all(sapply(pvalues, class)=="numeric"))))
stop("pvalue vector is not numeric, can't draw plot")
if (any(is.na(unlist(pvalues)))) stop("pvalue vector contains NA values, can't draw plot")
if (already.transformed==FALSE) {
if (any(unlist(pvalues)==0)) noprob=1
#stop("pvalue vector contains zeros, can't draw plot")
} else {
if (any(unlist(pvalues)<0)) stop("-log10 pvalue vector contains negative values, can't draw plot")
}
grp<-NULL
n<-1
exp.x<-c()
if(is.list(pvalues)) {
nn<-sapply(pvalues, length)
rs<-cumsum(nn)
re<-rs-nn+1
n<-min(nn)
if (!is.null(names(pvalues))) {
grp=factor(rep(names(pvalues), nn), levels=names(pvalues))
names(pvalues)<-NULL
} else {
grp=factor(rep(1:length(pvalues), nn))
}
pvo<-pvalues
pvalues<-numeric(sum(nn))
exp.x<-numeric(sum(nn))
for(i in 1:length(pvo)) {
if (!already.transformed) {
pvalues[rs[i]:re[i]] <- -log10(pvo[[i]])
exp.x[rs[i]:re[i]] <- -log10((rank(pvo[[i]], ties.method="first")-.5)/nn[i])
} else {
pvalues[rs[i]:re[i]] <- pvo[[i]]
exp.x[rs[i]:re[i]] <- -log10((nn[i]+1-rank(pvo[[i]], ties.method="first")-.5)/(nn[i]+1))
}
}
} else {
n <- length(pvalues)+1
if (!already.transformed) {
exp.x <- -log10((rank(pvalues, ties.method="first")-.5)/n)
pvalues <- -log10(pvalues)
} else {
exp.x <- -log10((n-rank(pvalues, ties.method="first")-.5)/n)
}
}
#this is a helper function to draw the confidence interval
panel.qqconf<-function(n, conf.points=1000, conf.col="gray", conf.alpha=.05, ...) {
require(grid)
conf.points = min(conf.points, n-1);
mpts<-matrix(nrow=conf.points*2, ncol=2)
for(i in seq(from=1, to=conf.points)) {
mpts[i,1]<- -log10((i-.5)/n)
mpts[i,2]<- -log10(qbeta(1-conf.alpha/2, i, n-i))
mpts[conf.points*2+1-i,1]<- -log10((i-.5)/n)
mpts[conf.points*2+1-i,2]<- -log10(qbeta(conf.alpha/2, i, n-i))
}
grid.polygon(x=mpts[,1],y=mpts[,2], gp=gpar(fill=conf.col, lty=0), default.units="native")
}
#reduce number of points to plot
if (should.thin==T) {
if (!is.null(grp)) {
thin <- unique(data.frame(pvalues = round(pvalues, thin.obs.places),
exp.x = round(exp.x, thin.exp.places),
grp=grp))
grp = thin$grp
} else {
thin <- unique(data.frame(pvalues = round(pvalues, thin.obs.places),
exp.x = round(exp.x, thin.exp.places)))
}
pvalues <- thin$pvalues
exp.x <- thin$exp.x
}
gc()
prepanel.qqunif= function(x,y,...) {
A = list()
#A$xlim = range(x, y)*1.02
if (is.null(yrange)==T) {yrange=range(x, y)*1.02}
A$xlim=yrange
A$xlim[1]=0
A$ylim = A$xlim
return(A)
}
#draw the plot
noninf=!is.infinite(pvalues) & !is.infinite(pvalues)
pvalues=pvalues[noninf]
exp.x=exp.x[noninf]
xyplot(pvalues~exp.x, groups=grp, xlab=xlab, ylab=ylab, main=title, aspect=aspect,
prepanel=prepanel,
scales=list(axs="i"), pch=pch,
panel = function(x, y, ...) {
if (draw.conf) {
panel.qqconf(n, conf.points=conf.points,
conf.col=conf.col, conf.alpha=conf.alpha)
};
panel.xyplot(x,y, ...);
panel.abline(0,1);
}, par.settings=par.settings, ...
)
}
#Correlation between the phenotypes
common=intersect(row.names(did2011),row.names(lda2006))
common1=intersect(common,row.names(lorr2005))
p1=did2015.males[common1,]
p2=lda2006[common1,]
p3=lorr2005[common1,]
cor(data.frame(p1,p2,p3))
Cairo(file="phenocorrs.pdf",typ="pdf",dpi=80,height=400,width=500)
qplot(x=Var1, y=Var2, data=melt(round(cor(data.frame(DID=p1,LDA=p2,LORR=p3)),3)),
fill=value, geom="tile")+
geom_text(aes(Var1,Var2,label=value),color="black",size=4)
dev.off()
Cairo(file="phenoscatter.pdf",typ="pdf",dpi=100,height=400,width=1200)
par(mfrow=c(1,3))
plot(p1,p2,pch=16,cex=0.8, col="darkgrey",xlab="DID",ylab="LDA",
main=paste0("r = ",round(cor(p1,p2),2),
" (p = ",round(cor.test(p1,p2)$p.value,3),")"))
plot(p1,p3,pch=16,cex=0.8, col="darkgrey",xlab="DID",ylab="LORR",
main=paste0("r = ",round(cor(p1,p3),2),
" (p = ",round(cor.test(p1,p3)$p.value,3),")"))
plot(p2,p3,pch=16,cex=0.8, col="darkgrey",xlab="LDA",ylab="LORR",
main=paste0("r = ",round(cor(p3,p2),2),
" (p = ",round(cor.test(p3,p2)$p.value,3),")"))
dev.off()
#Correlation between the phenotypes
common=intersect(row.names(did2011),row.names(lda2006))
common1=intersect(common,row.names(lorr2005))
p1=did2011[common1,]
p2=lda2006[common1,]
p3=lorr2005[common1,]
cor(data.frame(p1,p2,p3))
Cairo(file="phenocorrs.pdf",typ="pdf",dpi=80,height=400,width=500)
qplot(x=Var1, y=Var2, data=melt(round(cor(data.frame(DID=p1,LDA=p2,LORR=p3)),3)),
fill=value, geom="tile")+
geom_text(aes(Var1,Var2,label=value),color="black",size=4)
dev.off()
Cairo(file="phenoscatter.pdf",typ="pdf",dpi=100,height=400,width=1200)
par(mfrow=c(1,3))
plot(p1,p2,pch=16,cex=0.8, col="darkgrey",xlab="DID",ylab="LDA",
main=paste0("r = ",round(cor(p1,p2),2),
" (p = ",round(cor.test(p1,p2)$p.value,3),")"))
plot(p1,p3,pch=16,cex=0.8, col="darkgrey",xlab="DID",ylab="LORR",
main=paste0("r = ",round(cor(p1,p3),2),
" (p = ",round(cor.test(p1,p3)$p.value,3),")"))
plot(p2,p3,pch=16,cex=0.8, col="darkgrey",xlab="LDA",ylab="LORR",
main=paste0("r = ",round(cor(p3,p2),2),
" (p = ",round(cor.test(p3,p2)$p.value,3),")"))
dev.off()
library("lattice")
library("gridExtra")
library("reshape2")
####### Prediction Figure #########
Cairo(file="ldalorrbar.pdf",typ="pdf",dpi=80,height=490,width=800)
op=par(oma=c(3.5,0,1,0))
par(mfrow=c(1,2))
plot(c(1,7.5),c(-600,600),type="n",
xlab="Difference in Expression",ylab="Change in LDA (cm)",
xaxt="n",main="A")
axis(side=1,at=c(2.5,6.5),labels = c("2-Quartile","4-Quartile"),tick = F)
lines(c(2,2),c(0,-ldaarr.m[2]+ldaarr.m[3]),col="red",lwd=20,lend="butt")
lines(c(2.7,2.7),c(0,-ldaarr.g[2]+ldaarr.g[3]),col="blue",lwd=20,lend="butt")
lines(c(6.1,6.1),c(0,-ldaarr.m[1]+ldaarr.m[4]),col="red",lwd=20, lend="butt")
lines(c(6.8,6.8),c(0,-ldaarr.g[1]+ldaarr.g[4]),col="blue",lwd=20, lend="butt")
abline(h=0)
plot(c(1,7.5),c(-50,50),type="n",
xlab="Difference in Expression",ylab="Change in LORR (min)",
xaxt="n",main="B")
axis(side=1,at=c(2.5,6.5),labels = c("2-Quartile","4-Quartile"),tick = F)
lines(c(2,2),c(0,-lorrarr.m[2]+lorrarr.m[3]),col="red",lwd=20, lend="butt")
lines(c(2.7,2.7),c(0,-lorrarr.g[2]+lorrarr.g[3]),col="blue",lwd=20, lend="butt")
lines(c(6.1,6.1),c(0,-lorrarr.m[1]+lorrarr.m[4]),col="red",lwd=20, lend="butt")
lines(c(6.8,6.8),c(0,-lorrarr.g[1]+lorrarr.g[4]),col="blue",lwd=20, lend="butt")
abline(h=0)
op = par(usr=c(0,1,0,1), xpd=NA)
legend(-0.5,-0.46,
legend=c("miRNA","Gene"),
fill=c("red","blue"),
bg="white", horiz=T, cex=1, bty="n")
dev.off()
common=intersect(row.names(did2011),row.names(lda2006))
common1=intersect(common,row.names(lorr2005))
p1=did2011[common1,]
p2=lda2006[common1,]
p3=lorr2005[common1,]
cor(data.frame(p1,p2,p3))
Cairo(file="phenocorrs.pdf",typ="pdf",dpi=80,height=400,width=500)
qplot(x=Var1, y=Var2, data=melt(round(cor(data.frame(DID=p1,LDA=p2,LORR=p3)),3)),
fill=value, geom="tile")+
geom_text(aes(Var1,Var2,label=value),color="black",size=4)
dev.off()
Cairo(file="phenoscatter.pdf",typ="pdf",dpi=100,height=400,width=1200)
par(mfrow=c(1,3))
plot(p1,p2,pch=16,cex=0.8, col="darkgrey",xlab="DID",ylab="LDA",
main=paste0("r = ",round(cor(p1,p2),2),
" (p = ",round(cor.test(p1,p2)$p.value,3),")"))
plot(p1,p3,pch=16,cex=0.8, col="darkgrey",xlab="DID",ylab="LORR",
main=paste0("r = ",round(cor(p1,p3),2),
" (p = ",round(cor.test(p1,p3)$p.value,3),")"))
plot(p2,p3,pch=16,cex=0.8, col="darkgrey",xlab="LDA",ylab="LORR",
main=paste0("r = ",round(cor(p3,p2),2),
" (p = ",round(cor.test(p3,p2)$p.value,3),")"))
dev.off()
### QQ plots ###
Cairo(file="QQplotconditional.pdf",typ="pdf",dpi=80,height=400,width=1200)
xx=out.vst[unique(which(out.mrna.mirna<0.001,arr.ind=T)[,1]),
unique(which(out.geneeqtl<0.001,arr.ind=T)[,2])]
p1=qqunif.plot(as.numeric(xx),draw.conf=F,title="miRNA-SDP")#,yrange=c(0,10))
xx=out.geneeqtl[unique(which(out.mrna.mirna<0.001,arr.ind=T)[,2]),
unique(which(out.vst<0.001,arr.ind=T)[,2])]
set.seed(123)
p2=qqunif.plot(as.numeric(xx),
draw.conf=F,title="mRNA-SDP",yrange=c(0,10))
set.seed(123)
xx=out.mrna.mirna[unique(which(out.vst<0.001,arr.ind=T)[,1]),
unique(which(out.geneeqtl<0.001,arr.ind=T)[,1])]
p3=qqunif.plot(as.numeric(xx),
draw.conf=F,title="miRNA-mRNA",yrange=c(0,10))
grid.arrange(p1,p2,p3,ncol=3)
dev.off()
Cairo(file="QQplotconditionalNZ.pdf",typ="pdf",dpi=80,height=400,width=1200)
xx=out.vst[unique(which(out.mrna.mirna<0.001,arr.ind=T)[,1]),
unique(which(out.geneeqtl<0.001,arr.ind=T)[,2])]
p1=qqunif.plot(as.numeric(xx),draw.conf=F,title="miRNA-SDP")#,yrange=c(0,10))
xx=out.geneeqtl[unique(which(out.mrna.mirna<0.001,arr.ind=T)[,2]),
unique(which(out.vst<0.001,arr.ind=T)[,2])]
set.seed(123)
p2=qqunif.plot(as.numeric(xx),
draw.conf=F,title="mRNA-SDP")#,yrange=c(0,10))
set.seed(123)
xx=out.mrna.mirna[unique(which(out.vst<0.001,arr.ind=T)[,1]),
unique(which(out.geneeqtl<0.001,arr.ind=T)[,1])]
p3=qqunif.plot(as.numeric(xx),
draw.conf=F,title="miRNA-mRNA")#,yrange=c(0,10))
grid.arrange(p1,p2,p3,ncol=3)
dev.off()
#Barplots#
dropstrains=c("ISS","ILS","D2","B6","DBA")
Cairo(file="strainbarplot.pdf",typ="pdf",dpi=100,height=1200,width=1400)
par(mfrow=c(3,1))
barplot(sort(did2011[-which(row.names(did2011) %in% dropstrains),1]),las=2,
ylab="DID (g/kg)")
which(row.names(lorr2005) %in% dropstrains)#none
barplot(sort(lorr2005[,1]),las=2,ylab="LORR (min)")
which(row.names(lda2006) %in% dropstrains)#none
barplot(sort(lda2006[,1]),las=2,ylab="LDA (cm)")
dev.off()
### Histogram ###
Cairo(file="phenocorhist.pdf",typ="pdf",dpi=100,height=1200,width=1400)
par(mfrow=c(3,3))
#DID
common=intersect(row.names(did2011),colnames(vsd.mirna))
counts=vsd.mirna[,common] #881 x 33
genos=genomat.alleles.sdp.short[,common]
genes=genedata.collapsed[,common]
did.pheno=did2011[common,] #length 33 vector
names(did.pheno)=common
hist(cor(did.pheno,t(counts[unique(candid[,1]),])),main="DID-miRNA",xlab="Correlation")
hist(cor(did.pheno,t(genes[unique(candid[,3]),])),main="DID-mRNA",xlab="Correlation")
hist(cor(did.pheno,t(genos[unique(candid[,1]),])),main="DID-SDP",xlab="Correlation")
#LDA
common=intersect(row.names(lda2006),colnames(vsd.mirna))
counts=vsd.mirna[,common] #881 x 57
genos=genomat.alleles.sdp.short[,common]
genes=genedata.collapsed[,common]
lda.pheno=lda2006[common,] #length 57 vector
names(lda.pheno)=common
hist(cor(lda.pheno,t(counts[unique(candid[,1]),])),main="LDA-miRNA",xlab="Correlation")
hist(cor(lda.pheno,t(genes[unique(candid[,3]),])),main="LDA-mRNA",xlab="Correlation")
hist(cor(lda.pheno,t(genos[unique(candid[,2]),])),main="LDA-SDP",xlab="Correlation")
#LORR
common=intersect(row.names(lorr2005),colnames(vsd.mirna))
lorr.pheno=lorr2005[common,] #Only males, 58 dimensional vector
names(lorr.pheno)=common
counts=vsd.mirna[,common] #881 x 58
genos=genomat.alleles.sdp.short[,common]
genes=genedata.collapsed[,common]
hist(cor(lorr.pheno,t(counts[unique(candid[,1]),])),main="LORR-miRNA",xlab="Correlation")
hist(cor(lorr.pheno,t(genes[unique(candid[,3]),])),main="LORR-mRNA",xlab="Correlation")
hist(cor(lorr.pheno,t(genos[unique(candid[,2]),])),main="LORR-SDP",xlab="Correlation")
dev.off()
### QQ plots ###
Cairo(file="QQplotconditional.pdf",typ="pdf",dpi=80,height=400,width=1200)
xx=out.vst[unique(which(out.mrna.mirna<0.001,arr.ind=T)[,1]),
unique(which(out.geneeqtl<0.001,arr.ind=T)[,2])]
p1=qqunif.plot(as.numeric(xx),draw.conf=F,title="miRNA-SDP",yrange=c(0,10))
xx=out.geneeqtl[unique(which(out.mrna.mirna<0.001,arr.ind=T)[,2]),
unique(which(out.vst<0.001,arr.ind=T)[,2])]
set.seed(123)
p2=qqunif.plot(as.numeric(xx),
draw.conf=F,title="mRNA-SDP",yrange=c(0,10))
set.seed(123)
xx=out.mrna.mirna[unique(which(out.vst<0.001,arr.ind=T)[,1]),
unique(which(out.geneeqtl<0.001,arr.ind=T)[,1])]
p3=qqunif.plot(as.numeric(xx),
draw.conf=F,title="miRNA-mRNA",yrange=c(0,10))
grid.arrange(p1,p2,p3,ncol=3)
dev.off()
getwd()
2000-361.64
